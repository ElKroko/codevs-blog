---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';

type Props = CollectionEntry<'knowledgeBase'>['data'];

const { 
	title, 
	description, 
	excerpt,
	pubDate, 
	updatedDate, 
	heroImage,
	author,
	category,
	tags,
	ranking,
	attachments,
	resources,
	readingTime,
	prerequisites,
	objectives
} = Astro.props;

// Function to get category icon and color
function getCategoryInfo(category: string) {
	const categories = {
		frontend: { icon: '🎨', color: 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300' },
		backend: { icon: '⚙️', color: 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300' },
		devops: { icon: '🔧', color: 'bg-orange-100 text-orange-800 dark:bg-orange-900/30 dark:text-orange-300' },
		mobile: { icon: '📱', color: 'bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-300' },
		'data-science': { icon: '📊', color: 'bg-indigo-100 text-indigo-800 dark:bg-indigo-900/30 dark:text-indigo-300' },
		'ai-ml': { icon: '🤖', color: 'bg-pink-100 text-pink-800 dark:bg-pink-900/30 dark:text-pink-300' },
		security: { icon: '🔒', color: 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300' },
		tools: { icon: '🛠️', color: 'bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-300' },
		'best-practices': { icon: '✨', color: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300' },
		architecture: { icon: '🏗️', color: 'bg-teal-100 text-teal-800 dark:bg-teal-900/30 dark:text-teal-300' },
		databases: { icon: '🗄️', color: 'bg-cyan-100 text-cyan-800 dark:bg-cyan-900/30 dark:text-cyan-300' },
		cloud: { icon: '☁️', color: 'bg-sky-100 text-sky-800 dark:bg-sky-900/30 dark:text-sky-300' },
		other: { icon: '📋', color: 'bg-neutral-100 text-neutral-800 dark:bg-neutral-900/30 dark:text-neutral-300' }
	};
	return categories[category] || categories.other;
}

// Function to get attachment icon
function getAttachmentIcon(type: string) {
	const icons = {
		pdf: '📄',
		video: '🎥',
		link: '🔗',
		code: '💻',
		image: '🖼️',
		other: '📁'
	};
	return icons[type] || icons.other;
}

// Function to render ranking stars
function getRankingStars(ranking: number) {
	return '⭐'.repeat(ranking) + '☆'.repeat(5 - ranking);
}

const categoryInfo = getCategoryInfo(category);
---

<html lang="es">
	<head>
		<BaseHead title={title} description={description} />
	</head>

	<body class="bg-white dark:bg-gray-900 text-gray-900 dark:text-white min-h-screen">
		<Header />
		<main class="w-full">
			<article>
				{heroImage && (
					<div class="w-full mb-8">
						<img 
							width={1020} 
							height={510} 
							src={heroImage} 
							alt={title}
							class="block mx-auto rounded-xl shadow-2xl max-w-full h-auto"
						/>
					</div>
				)}
				
				<div class="max-w-4xl mx-auto px-4 py-8">
					<!-- Header Section -->
					<div class="text-center mb-8 border-b border-gray-200 dark:border-gray-700 pb-8">
						<!-- Category and Meta Info -->
						<div class="flex flex-wrap items-center justify-center gap-4 mb-6">
							<div class={`px-3 py-1 rounded-full text-sm font-medium ${categoryInfo.color}`}>
								{categoryInfo.icon} {category.charAt(0).toUpperCase() + category.slice(1).replace('-', ' ')}
							</div>
							<div class="text-gray-600 dark:text-gray-400 text-sm">
								<FormattedDate date={pubDate} />
							</div>
							{readingTime && (
								<div class="text-gray-600 dark:text-gray-400 text-sm">
									⏱️ {readingTime}
								</div>
							)}
						</div>

						<!-- Title and Ranking -->
						<h1 class="text-4xl font-bold mb-4 gradient-text">
							{title}
						</h1>
						
						<div class="flex items-center justify-center gap-2 mb-4">
							<span class="text-lg">{getRankingStars(ranking)}</span>
							<span class="text-sm text-gray-600 dark:text-gray-400">
								Calidad: {ranking}/5
							</span>
						</div>

						<!-- Author Info -->
						<div class="flex items-center justify-center gap-3 mb-4">
							{author.avatar && (
								<img 
									src={author.avatar} 
									alt={author.name}
									class="w-10 h-10 rounded-full"
								/>
							)}
							<div class="text-left">
								<div class="font-medium text-gray-900 dark:text-gray-100">
									{author.name}
								</div>
								{author.bio && (
									<div class="text-sm text-gray-600 dark:text-gray-400">
										{author.bio}
									</div>
								)}
							</div>
						</div>

						{updatedDate && (
							<div class="text-sm text-gray-600 dark:text-gray-400 italic">
								Última actualización: <FormattedDate date={updatedDate} />
							</div>
						)}
					</div>

					<!-- Excerpt -->
					<div class="bg-primary-50 dark:bg-primary-900/20 rounded-lg p-6 mb-8">
						<h2 class="text-lg font-semibold mb-3 text-primary-900 dark:text-primary-100">
							📝 Resumen
						</h2>
						<p class="text-primary-800 dark:text-primary-200">
							{excerpt}
						</p>
					</div>

					<!-- Prerequisites and Objectives -->
					{(prerequisites || objectives) && (
						<div class="grid md:grid-cols-2 gap-6 mb-8">
							{prerequisites && prerequisites.length > 0 && (
								<div class="bg-amber-50 dark:bg-amber-900/20 rounded-lg p-6">
									<h3 class="text-lg font-semibold mb-3 text-amber-900 dark:text-amber-100 flex items-center gap-2">
										📚 Prerrequisitos
									</h3>
									<ul class="space-y-2">
										{prerequisites.map((prereq) => (
											<li class="flex items-start gap-2 text-amber-800 dark:text-amber-200">
												<span class="text-amber-600 dark:text-amber-400 mt-1">•</span>
												{prereq}
											</li>
										))}
									</ul>
								</div>
							)}

							{objectives && objectives.length > 0 && (
								<div class="bg-green-50 dark:bg-green-900/20 rounded-lg p-6">
									<h3 class="text-lg font-semibold mb-3 text-green-900 dark:text-green-100 flex items-center gap-2">
										🎯 Objetivos de Aprendizaje
									</h3>
									<ul class="space-y-2">
										{objectives.map((objective) => (
											<li class="flex items-start gap-2 text-green-800 dark:text-green-200">
												<span class="text-green-600 dark:text-green-400 mt-1">•</span>
												{objective}
											</li>
										))}
									</ul>
								</div>
							)}
						</div>
					)}

					<!-- Attachments -->
					{attachments && attachments.length > 0 && (
						<div class="mb-8">
							<h3 class="text-xl font-semibold mb-4 text-gray-900 dark:text-gray-100 flex items-center gap-2">
								📎 Archivos y Recursos
							</h3>
							<div class="grid gap-3 md:grid-cols-2">
								{attachments.map((attachment) => (
									<a 
										href={attachment.url} 
										target="_blank"
										class="flex items-center gap-3 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors duration-200"
									>
										<div class="w-10 h-10 flex items-center justify-center bg-primary-100 dark:bg-primary-900/30 rounded text-primary-600 dark:text-primary-400 text-xl">
											{getAttachmentIcon(attachment.type)}
										</div>
										<div class="flex-1">
											<div class="font-medium text-gray-900 dark:text-gray-100">
												{attachment.title}
											</div>
											{attachment.description && (
												<div class="text-sm text-gray-600 dark:text-gray-400">
													{attachment.description}
												</div>
											)}
											{attachment.size && (
												<div class="text-xs text-gray-500 dark:text-gray-500">
													{attachment.size}
												</div>
											)}
										</div>
										<svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
										</svg>
									</a>
								))}
							</div>
						</div>
					)}

					<!-- Content -->
					<div class="prose prose-lg dark:prose-invert max-w-none mb-8">
						<div class="prose-headings:text-gray-900 dark:prose-headings:text-white prose-p:text-gray-700 dark:prose-p:text-gray-300 prose-a:text-accent-600 dark:prose-a:text-accent-400 prose-strong:text-gray-900 dark:prose-strong:text-white prose-code:text-accent-700 dark:prose-code:text-accent-300 prose-pre:bg-gray-100 dark:prose-pre:bg-gray-900 prose-blockquote:border-l-primary-500">
							<slot />
						</div>
					</div>

					<!-- Resources -->
					{resources && resources.length > 0 && (
						<div class="mb-8">
							<h3 class="text-xl font-semibold mb-4 text-gray-900 dark:text-gray-100 flex items-center gap-2">
								🔗 Recursos Adicionales
							</h3>
							<div class="grid gap-3">
								{resources.map((resource) => (
									<a 
										href={resource.url} 
										target="_blank"
										class="flex items-center gap-3 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800 hover:bg-blue-100 dark:hover:bg-blue-900/30 transition-colors duration-200"
									>
										<div class="w-8 h-8 flex items-center justify-center bg-blue-100 dark:bg-blue-900/50 rounded text-blue-600 dark:text-blue-400">
											{resource.type === 'documentation' ? '📚' : 
											 resource.type === 'tutorial' ? '🎓' :
											 resource.type === 'repository' ? '💻' :
											 resource.type === 'video' ? '🎥' :
											 resource.type === 'article' ? '📰' :
											 resource.type === 'tool' ? '🛠️' : '🔗'}
										</div>
										<div class="flex-1">
											<div class="font-medium text-blue-900 dark:text-blue-100">
												{resource.title}
											</div>
											<div class="text-sm text-blue-700 dark:text-blue-300 capitalize">
												{resource.type.replace('-', ' ')}
											</div>
										</div>
										<svg class="w-4 h-4 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
										</svg>
									</a>
								))}
							</div>
						</div>
					)}

					<!-- Tags -->
					{tags && tags.length > 0 && (
						<div class="mb-8">
							<h3 class="text-lg font-semibold mb-3 text-gray-900 dark:text-gray-100">
								🏷️ Tags
							</h3>
							<div class="flex flex-wrap gap-2">
								{tags.map((tag) => (
									<span class="px-3 py-1 bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-full text-sm">
										#{tag}
									</span>
								))}
							</div>
						</div>
					)}

					<!-- Navigation -->
					<div class="border-t border-gray-200 dark:border-gray-700 pt-8">
						<div class="flex items-center justify-between">
							<a 
								href="/knowledge-base"
								class="inline-flex items-center gap-2 text-primary-600 dark:text-primary-400 hover:text-primary-700 dark:hover:text-primary-300 transition-colors duration-200"
							>
								<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
								</svg>
								Volver a la Base de Conocimientos
							</a>
							
							<div class="flex items-center gap-3">
								<span class="text-sm text-gray-600 dark:text-gray-400">Compartir:</span>
								<button 
									onclick="navigator.share ? navigator.share({title: document.title, url: window.location.href}) : navigator.clipboard.writeText(window.location.href)"
									class="p-2 text-gray-600 dark:text-gray-400 hover:text-primary-600 dark:hover:text-primary-400 transition-colors duration-200"
									title="Compartir"
								>
									🔗
								</button>
							</div>
						</div>
					</div>
				</div>
			</article>
		</main>
		<Footer />
	</body>
</html>