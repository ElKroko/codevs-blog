---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import AuthorCard from '../components/AuthorCard.astro';
import EnhancedClapsSystem from '../components/EnhancedClapsSystem.astro';

export interface Props {
	title: string;
	content: string;
	date: string;
	modified?: string;
	featuredImage?: string;
	excerpt?: string;
	author?: {
		name: string;
		description: string;
		avatar: string;
		url?: string;
	};
	categories?: Array<{
		id: number;
		name: string;
		slug: string;
	}>;
	tags?: Array<{
		id: number;
		name: string;
		slug: string;
	}>;
	claps?: number;
	readingTime?: string;
	id?: number;
}

const { 
	title, 
	content, 
	date, 
	modified,
	featuredImage, 
	excerpt, 
	author, 
	categories = [], 
	tags = [], 
	claps = 0, 
	readingTime,
	id 
} = Astro.props;

// Generate slug from URL or title
const url = Astro.url.pathname;
const slug = url.split('/').pop() || title.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');
---

<html lang="es">
	<head>
		<BaseHead title={title} description={excerpt || title} />
	</head>

	<body class="bg-white dark:bg-gray-900 text-gray-900 dark:text-white min-h-screen">
		<Header />
		<main class="w-full">
			<article>
				{featuredImage && (
					<div class="w-full mb-8">
						<img 
							src={featuredImage} 
							alt={title}
							class="block mx-auto rounded-xl shadow-2xl max-w-full h-auto"
							style="max-height: 500px; object-fit: cover;"
						/>
					</div>
				)}
				<div class="max-w-4xl mx-auto px-4 py-8">					<div class="text-center mb-8 border-b border-gray-200 dark:border-gray-700 pb-8">
						<div class="text-gray-600 dark:text-gray-400 mb-4">
							<FormattedDate date={new Date(date)} />
						</div>
						<h1 class="text-4xl font-bold mb-0 gradient-text">
							{title}
						</h1>
					</div>					<!-- Blog Post Information Table -->					<div class="bg-gradient-to-br from-primary-50 via-secondary-50 to-accent-50 dark:from-primary-900/10 dark:via-secondary-900/10 dark:to-accent-900/10 rounded-xl p-6 mb-8 shadow-lg border border-primary-100 dark:border-primary-800/30">
						<h2 class="text-lg font-semibold text-white dark:text-gray-100 mb-4 flex items-center gap-2">
							üìä Informaci√≥n del Art√≠culo
						</h2>
						
						<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 text-sm">							<!-- Popularidad -->
							<div class="flex items-center gap-3 p-3 bg-white dark:bg-gray-800 rounded-lg shadow-sm">
								<div class="flex-shrink-0 w-10 h-10 bg-primary-100 dark:bg-primary-900/20 rounded-full flex items-center justify-center">
									<span class="text-primary-600 dark:text-primary-400 text-lg">üëè</span>
								</div>
								<div>
									<div class="font-medium text-gray-900 dark:text-gray-100">Popularidad</div>
									<div class="text-gray-600 dark:text-gray-400">{claps} aplausos</div>
								</div>
							</div>

							<!-- Autor -->
							{author && (
								<div class="flex items-center gap-3 p-3 bg-white dark:bg-gray-800 rounded-lg shadow-sm">
									<div class="flex-shrink-0 w-10 h-10 bg-secondary-100 dark:bg-secondary-900/20 rounded-full flex items-center justify-center overflow-hidden">
										{author.avatar ? (
											<img src={author.avatar} alt={author.name} class="w-full h-full object-cover" />
										) : (
											<span class="text-secondary-600 dark:text-secondary-400 text-lg">üë§</span>
										)}
									</div>
									<div>
										<div class="font-medium text-gray-900 dark:text-gray-100">Autor</div>
										<div class="text-gray-600 dark:text-gray-400">{author.name}</div>
									</div>
								</div>
							)}

							<!-- Tiempo de lectura -->
							{readingTime && (
								<div class="flex items-center gap-3 p-3 bg-white dark:bg-gray-800 rounded-lg shadow-sm">
									<div class="flex-shrink-0 w-10 h-10 bg-accent-100 dark:bg-accent-900/20 rounded-full flex items-center justify-center">
										<span class="text-accent-600 dark:text-accent-400 text-lg">‚è±Ô∏è</span>
									</div>
									<div>
										<div class="font-medium text-gray-900 dark:text-gray-100">Lectura</div>
										<div class="text-gray-600 dark:text-gray-400">{readingTime}</div>
									</div>
								</div>
							)}

							<!-- Fecha de publicaci√≥n -->
							<div class="flex items-center gap-3 p-3 bg-white dark:bg-gray-800 rounded-lg shadow-sm">
								<div class="flex-shrink-0 w-10 h-10 bg-primary-100 dark:bg-primary-900/20 rounded-full flex items-center justify-center">
									<span class="text-primary-600 dark:text-primary-400 text-lg">üìÖ</span>
								</div>
								<div>
									<div class="font-medium text-gray-900 dark:text-gray-100">Publicado</div>
									<div class="text-gray-600 dark:text-gray-400">
										{new Date(date).toLocaleDateString('es-ES', {
											year: 'numeric',
											month: 'short',
											day: 'numeric'
										})}
									</div>
								</div>
							</div>

							<!-- √öltima actualizaci√≥n -->
							{modified && modified !== date && (
								<div class="flex items-center gap-3 p-3 bg-white dark:bg-gray-800 rounded-lg shadow-sm">
									<div class="flex-shrink-0 w-10 h-10 bg-secondary-100 dark:bg-secondary-900/20 rounded-full flex items-center justify-center">
										<span class="text-secondary-600 dark:text-secondary-400 text-lg">üîÑ</span>
									</div>
									<div>
										<div class="font-medium text-gray-900 dark:text-gray-100">Actualizado</div>
										<div class="text-gray-600 dark:text-gray-400">
											{new Date(modified).toLocaleDateString('es-ES', {
												year: 'numeric',
												month: 'short',
												day: 'numeric'
											})}
										</div>
									</div>
								</div>
							)}

							<!-- Categor√≠as -->
							{categories && categories.length > 0 && (
								<div class="flex items-start gap-3 p-3 bg-white dark:bg-gray-800 rounded-lg shadow-sm">
									<div class="flex-shrink-0 w-10 h-10 bg-accent-100 dark:bg-accent-900/20 rounded-full flex items-center justify-center">
										<span class="text-accent-600 dark:text-accent-400 text-lg">üè∑Ô∏è</span>
									</div>
									<div class="min-w-0 flex-1">
										<div class="font-medium text-gray-900 dark:text-gray-100">Categor√≠as</div>
										<div class="flex flex-wrap gap-1 mt-1">
											{categories.map(category => (
												<span class="inline-block px-2 py-1 bg-accent-100 dark:bg-accent-900/30 text-accent-700 dark:text-accent-300 rounded text-xs">
													{category.name}
												</span>
											))}
										</div>
									</div>
								</div>
							)}
						</div>						<!-- Tags section -->
						{tags && tags.length > 0 && (
							<div class="mt-4 pt-4 border-t border-primary-200 dark:border-primary-700">
								<div class="flex items-center gap-2 mb-2">
									<span class="text-primary-600 dark:text-primary-400 text-sm font-medium">üîñ Tags:</span>
								</div>
								<div class="flex flex-wrap gap-2">
									{tags.map(tag => (
										<span class="inline-block px-2 py-1 bg-primary-100 dark:bg-primary-900/20 text-primary-700 dark:text-primary-300 rounded-full text-xs hover:bg-primary-200 dark:hover:bg-primary-800/30 transition-colors">
											#{tag.name}
										</span>
									))}
								</div>
							</div>
						)}
					</div>					<div class="wp-content max-w-none" set:html={content} />
					
					<!-- Enhanced Author Card -->
					{author && (
						<div class="mt-8">
							<AuthorCard 
								author={author}
								publishDate={date}
								modified={modified}
							/>
						</div>
					)}
							<!-- Enhanced Claps System -->
					<EnhancedClapsSystem 
						slug={slug}
						initialClaps={claps}
						postTitle={title}
					/>
				</div>
			</article>
		</main>
		<Footer />
		<script is:inline>
			// Global variables for the claps system
			let clapButton, countDisplay, thankYouMessage;
			let currentSlug, hasClapped = false, currentCount = 0;

			// Initialize when DOM is loaded
			document.addEventListener('DOMContentLoaded', initClapsSystem);

			function getSlugFromURL() {
				const path = window.location.pathname;
				return path.split('/').pop() || 'default-slug';
			}

			async function initClapsSystem() {
				try {
					// Get DOM elements
					clapButton = document.getElementById('clap-button');
					countDisplay = document.getElementById('clap-count');
					thankYouMessage = document.getElementById('thank-you-message');
					currentSlug = getSlugFromURL();

					if (!clapButton || !countDisplay || !thankYouMessage) {
						console.error('Claps system elements not found');
						return;
					}

					await loadCurrentClaps();
					setupEventListeners();
					checkIfUserClapped();
				} catch (error) {
					console.error('Error initializing claps system:', error);
				}
			}

			async function loadCurrentClaps() {
				try {
					const wpDomain = 'https://cms.kroko.cl'; // Fallback if env var not available
					const response = await fetch(`${wpDomain}/wp-json/codevs/v1/claps/${currentSlug}`);
					
					if (response.ok) {
						const data = await response.json();
						currentCount = data.claps || 0;
						updateCountDisplay();
					}
				} catch (error) {
					console.error('Error loading claps:', error);
				}
			}

			function checkIfUserClapped() {
				const clapKey = `clapped_${currentSlug}`;
				hasClapped = localStorage.getItem(clapKey) === 'true';
				
				if (hasClapped) {
					showThankYouMessage();
					clapButton.classList.add('clapped');
				}
			}

			function setupEventListeners() {
				clapButton.addEventListener('click', handleClap);
			}

			async function handleClap() {
				if (hasClapped) {
					showAlreadyClappedFeedback();
					return;
				}

				try {
					// Optimistic update
					currentCount++;
					updateCountDisplay();
					addRippleEffect();
					triggerConfetti();

					// API call
					const wpDomain = 'https://cms.kroko.cl';
					const response = await fetch(`${wpDomain}/wp-json/codevs/v1/claps/${currentSlug}`, {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
						}
					});

					if (response.ok) {
						const data = await response.json();
						currentCount = data.claps;
						updateCountDisplay();
						markAsClapped();
						showThankYouMessage();
					} else {
						// Revert optimistic update on error
						currentCount--;
						updateCountDisplay();
						showErrorMessage();
					}
				} catch (error) {
					console.error('Error adding clap:', error);
					// Revert optimistic update on error
					currentCount--;
					updateCountDisplay();
					showErrorMessage();
				}
			}

			function markAsClapped() {
				hasClapped = true;
				localStorage.setItem(`clapped_${currentSlug}`, 'true');
				clapButton.classList.add('clapped');
			}

			function updateCountDisplay() {
				countDisplay.textContent = currentCount.toString();
			}

			function showThankYouMessage() {
				thankYouMessage.classList.add('visible');
			}

			function showAlreadyClappedFeedback() {
				clapButton.classList.add('pulse');
				setTimeout(() => clapButton.classList.remove('pulse'), 600);
			}

			function showErrorMessage() {
				clapButton.classList.add('error');
				setTimeout(() => clapButton.classList.remove('error'), 1000);
			}

			function addRippleEffect() {
				const ripple = clapButton.querySelector('.clap-ripple');
				ripple.classList.add('animate');
				setTimeout(() => ripple.classList.remove('animate'), 600);
			}

			function triggerConfetti() {
				// Simple confetti alternative using CSS animations and emoji
				const confettiContainer = document.createElement('div');
				confettiContainer.className = 'confetti-container';
				document.body.appendChild(confettiContainer);

				// Create multiple confetti pieces
				for (let i = 0; i < 20; i++) {
					const confettiPiece = document.createElement('div');
					confettiPiece.className = 'confetti-piece';
					confettiPiece.textContent = ['üéâ', '‚ú®', 'üéä', '‚≠ê', 'üí´'][Math.floor(Math.random() * 5)];
					confettiPiece.style.left = Math.random() * 100 + '%';
					confettiPiece.style.animationDelay = Math.random() * 0.5 + 's';
					confettiContainer.appendChild(confettiPiece);
				}

				// Remove confetti after animation
				setTimeout(() => {
					document.body.removeChild(confettiContainer);
				}, 2000);
			}
		</script>
	</body>
</html>

<style>
/* WordPress Content Styles for Blog Posts */
.wp-content {
  line-height: 1.7;
  color: rgb(55, 65, 81);
}

.dark .wp-content {
  color: rgb(209, 213, 219);
}

/* Headings */
.wp-content h1 {
  font-size: 2.25rem;
  font-weight: 800;
  margin-top: 2rem;
  margin-bottom: 1rem;
  color: rgb(17, 24, 39);
  line-height: 1.2;
}

.wp-content h2 {
  font-size: 1.875rem;
  font-weight: 700;
  margin-top: 2rem;
  margin-bottom: 1rem;
  color: rgb(17, 24, 39);
  line-height: 1.3;
}

.wp-content h3 {
  font-size: 1.5rem;
  font-weight: 600;
  margin-top: 1.5rem;
  margin-bottom: 0.75rem;
  color: rgb(17, 24, 39);
  line-height: 1.4;
}

.wp-content h4 {
  font-size: 1.25rem;
  font-weight: 600;
  margin-top: 1.5rem;
  margin-bottom: 0.75rem;
  color: rgb(17, 24, 39);
  line-height: 1.4;
}

.wp-content h5,
.wp-content h6 {
  font-size: 1.125rem;
  font-weight: 600;
  margin-top: 1.5rem;
  margin-bottom: 0.75rem;
  color: rgb(17, 24, 39);
  line-height: 1.4;
}

/* Dark mode headings */
.dark .wp-content h1,
.dark .wp-content h2,
.dark .wp-content h3,
.dark .wp-content h4,
.dark .wp-content h5,
.dark .wp-content h6 {
  color: rgb(243, 244, 246);
}

/* Paragraphs */
.wp-content p {
  margin-bottom: 1.25rem;
  color: rgb(55, 65, 81);
}

.dark .wp-content p {
  color: rgb(209, 213, 219);
}

/* Lists */
.wp-content ul {
  list-style-type: disc;
  margin-left: 1.5rem;
  margin-bottom: 1.25rem;
  padding-left: 0.5rem;
}

.wp-content ol {
  list-style-type: decimal;
  margin-left: 1.5rem;
  margin-bottom: 1.25rem;
  padding-left: 0.5rem;
}

.wp-content li {
  margin-bottom: 0.5rem;
  color: rgb(55, 65, 81);
  line-height: 1.6;
}

.dark .wp-content li {
  color: rgb(209, 213, 219);
}

.wp-content li > ul,
.wp-content li > ol {
  margin-top: 0.5rem;
  margin-bottom: 0;
}

/* Code blocks and inline code */
.wp-content pre {
  background-color: rgb(17, 24, 39);
  border-radius: 0.5rem;
  padding: 1.5rem;
  margin: 1.5rem 0;
  overflow-x: auto;
  border: 1px solid rgb(55, 65, 81);
}

.wp-content pre code {
  color: rgb(229, 231, 235);
  font-family: 'Fira Code', 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
  font-size: 0.875rem;
  line-height: 1.7;
  background: none;
  padding: 0;
  border-radius: 0;
}

.wp-content code {
  background-color: rgb(243, 244, 246);
  color: rgb(194, 65, 12);
  padding: 0.25rem 0.5rem;
  border-radius: 0.25rem;
  font-family: 'Fira Code', 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
  font-size: 0.875rem;
  font-weight: 600;
}

.dark .wp-content code {
  background-color: rgb(55, 65, 81);
  color: rgb(253, 186, 116);
}

/* WordPress code block styling */
.wp-content .wp-block-code {
  background-color: rgb(17, 24, 39);
  border-radius: 0.5rem;
  padding: 1.5rem;
  margin: 1.5rem 0;
  overflow-x: auto;
  border: 1px solid rgb(55, 65, 81);
}

.wp-content .wp-block-code code {
  color: rgb(229, 231, 235);
  font-family: 'Fira Code', 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
  font-size: 0.875rem;
  line-height: 1.7;
  background: none;
  padding: 0;
  border-radius: 0;
}

/* Blockquotes */
.wp-content blockquote {
  border-left: 4px solid rgb(59, 130, 246);
  padding-left: 1.5rem;
  margin: 1.5rem 0;
  font-style: italic;
  color: rgb(75, 85, 99);
  background-color: rgb(249, 250, 251);
  padding: 1rem 1.5rem;
  border-radius: 0.5rem;
}

.dark .wp-content blockquote {
  color: rgb(156, 163, 175);
  background-color: rgb(31, 41, 55);
  border-left-color: rgb(59, 130, 246);
}

/* Links */
.wp-content a {
  color: rgb(59, 130, 246);
  text-decoration: underline;
  font-weight: 500;
  transition: color 0.2s ease;
}

.wp-content a:hover {
  color: rgb(37, 99, 235);
  text-decoration: none;
}

.dark .wp-content a {
  color: rgb(147, 197, 253);
}

.dark .wp-content a:hover {
  color: rgb(96, 165, 250);
}

/* WordPress specific blocks */
.wp-content .wp-block-heading {
  margin-top: 2rem;
  margin-bottom: 1rem;
}

.wp-content .wp-block-list {
  margin-bottom: 1.25rem;
}

.wp-content .wp-block-paragraph {
  margin-bottom: 1.25rem;
}

/* WordPress quote block */
.wp-content .wp-block-quote {
  border-left: 4px solid rgb(59, 130, 246);
  padding-left: 1.5rem;
  margin: 1.5rem 0;
  font-style: italic;
  color: rgb(75, 85, 99);
  background-color: rgb(249, 250, 251);
  padding: 1rem 1.5rem;
  border-radius: 0.5rem;
}

.dark .wp-content .wp-block-quote {
  color: rgb(156, 163, 175);
  background-color: rgb(31, 41, 55);
  border-left-color: rgb(59, 130, 246);
}

/* WordPress media blocks */
.wp-content .wp-block-image {
  margin: 1.5rem 0;
  text-align: center;
}

.wp-content .wp-block-image img {
  margin: 0 auto;
}

/* Claps System Styles */
.claps-container {
  display: flex;
  justify-content: center;
  margin: 3rem 0 2rem 0;
  padding: 2rem 0;
  border-top: 1px solid rgb(229, 231, 235);
  border-bottom: 1px solid rgb(229, 231, 235);
}

.dark .claps-container {
  border-color: rgb(75, 85, 99);
}

.claps-section {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1rem;
}

/* Clap Button */
.clap-button {
  position: relative;
  width: 4rem;
  height: 4rem;
  border-radius: 50%;
  border: none;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  font-size: 1.5rem;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
  overflow: hidden;
  display: flex;
  align-items: center;
  justify-content: center;
}

.clap-button:hover {
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(102, 126, 234, 0.6);
}

.clap-button:active {
  transform: translateY(0);
}

.clap-button.clapped {
  background: linear-gradient(135deg, #10b981 0%, #059669 100%);
  box-shadow: 0 4px 15px rgba(16, 185, 129, 0.4);
}

.clap-button.clapped:hover {
  box-shadow: 0 6px 20px rgba(16, 185, 129, 0.6);
}

.clap-button.pulse {
  animation: pulseEffect 0.6s ease-out;
}

.clap-button.error {
  animation: errorShake 0.5s ease-out;
  background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
}

/* Clap Icon */
.clap-icon {
  display: block;
  font-size: 1.5rem;
  transition: transform 0.2s ease;
}

.clap-button:hover .clap-icon {
  transform: scale(1.1);
}

/* Ripple Effect */
.clap-ripple {
  position: absolute;
  top: 50%;
  left: 50%;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  background: rgba(255, 255, 255, 0.6);
  transform: translate(-50%, -50%) scale(0);
  opacity: 0;
}

.clap-ripple.animate {
  animation: rippleAnimation 0.6s ease-out;
}

/* Count Display */
.clap-count-display {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 0.25rem;
}

.clap-count {
  font-size: 1.5rem;
  font-weight: 700;
  color: rgb(59, 130, 246);
  text-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.dark .clap-count {
  color: rgb(147, 197, 253);
}

.clap-label {
  font-size: 0.875rem;
  color: rgb(107, 114, 128);
  font-weight: 500;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.dark .clap-label {
  color: rgb(156, 163, 175);
}

/* Thank You Message */
.thank-you-message {
  opacity: 0;
  transform: translateY(10px);
  transition: all 0.3s ease;
  pointer-events: none;
}

.thank-you-message.visible {
  opacity: 1;
  transform: translateY(0);
}

.thank-you-text {
  font-size: 0.875rem;
  color: rgb(16, 185, 129);
  font-weight: 600;
  text-align: center;
  padding: 0.5rem 1rem;
  background: rgba(16, 185, 129, 0.1);
  border-radius: 1rem;
  border: 1px solid rgba(16, 185, 129, 0.2);
}

.dark .thank-you-text {
  color: rgb(52, 211, 153);
  background: rgba(52, 211, 153, 0.1);
  border-color: rgba(52, 211, 153, 0.2);
}

/* Confetti Animation */
.confetti-container {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1000;
}

.confetti-piece {
  position: absolute;
  top: 50%;
  font-size: 1.5rem;
  animation: confettiFall 2s ease-out forwards;
}

/* Animations */
@keyframes rippleAnimation {
  0% {
    transform: translate(-50%, -50%) scale(0);
    opacity: 1;
  }
  100% {
    transform: translate(-50%, -50%) scale(2);
    opacity: 0;
  }
}

@keyframes pulseEffect {
  0%, 100% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.1);
  }
}

@keyframes errorShake {
  0%, 100% {
    transform: translateX(0);
  }
  25% {
    transform: translateX(-5px);
  }
  75% {
    transform: translateX(5px);
  }
}

@keyframes confettiFall {
  0% {
    transform: translateY(-100vh) rotate(0deg);
    opacity: 1;
  }
  100% {
    transform: translateY(100vh) rotate(360deg);
    opacity: 0;
  }
}

/* Responsive Design */
@media (max-width: 768px) {
  .clap-button {
    width: 3.5rem;
    height: 3.5rem;
    font-size: 1.25rem;
  }
  
  .clap-count {
    font-size: 1.25rem;
  }
  
  .clap-label {
    font-size: 0.75rem;
  }
}
</style>
